AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 900
    MemorySize: 5000

Resources:
  ImageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ImageQueue
      VisibilityTimeout: 910
  InferenceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Architectures:
      - x86_64
      Events:
        Inference:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /detect
            Method: post
      Policies:
         - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageQueue.QueueName
      Environment:
        Variables:
          QUEUE_URL: !Ref ImageQueue
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fetch_image
      DockerTag: python3.11-v1
  
  ProcessImageLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Architectures:
      - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageQueue.Arn
            BatchSize: 1
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt ImageQueue.QueueName
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: "arn:aws:s3:::*/*" #during production , change this to a single bucket 
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app
      DockerTag: python3.11-v1
    


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  InferenceApi:
    Description: API Gateway endpoint URL for Prod stage for Inference function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/detect/"
  InferenceFunction:
    Description: Inference Lambda Function ARN
    Value: !GetAtt InferenceFunction.Arn
  InferenceFunctionIamRole:
    Description: Implicit IAM Role created for Inference function
    Value: !GetAtt InferenceFunctionRole.Arn
  ProcessImageLambdaFunction:
    Description: "Process Image Lambda Function ARN"
    Value: !GetAtt ProcessImageLambda.Arn
